# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import palette_ai_pb2 as palette__ai__pb2


class PaletteAIStub(object):
    """서비스 이름
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SpeechToText = channel.unary_unary(
                '/palette_ai.PaletteAI/SpeechToText',
                request_serializer=palette__ai__pb2.AudioRequest.SerializeToString,
                response_deserializer=palette__ai__pb2.TextResponse.FromString,
                )
        self.TextToEmotion = channel.unary_unary(
                '/palette_ai.PaletteAI/TextToEmotion',
                request_serializer=palette__ai__pb2.TextRequest.SerializeToString,
                response_deserializer=palette__ai__pb2.EmotionResponse.FromString,
                )


class PaletteAIServicer(object):
    """서비스 이름
    """

    def SpeechToText(self, request, context):
        """서비스 내의 메소드 이름
        위스퍼를 통한 STT
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TextToEmotion(self, request, context):
        """RoBERTa를 통한 감정 분석
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaletteAIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SpeechToText': grpc.unary_unary_rpc_method_handler(
                    servicer.SpeechToText,
                    request_deserializer=palette__ai__pb2.AudioRequest.FromString,
                    response_serializer=palette__ai__pb2.TextResponse.SerializeToString,
            ),
            'TextToEmotion': grpc.unary_unary_rpc_method_handler(
                    servicer.TextToEmotion,
                    request_deserializer=palette__ai__pb2.TextRequest.FromString,
                    response_serializer=palette__ai__pb2.EmotionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palette_ai.PaletteAI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaletteAI(object):
    """서비스 이름
    """

    @staticmethod
    def SpeechToText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palette_ai.PaletteAI/SpeechToText',
            palette__ai__pb2.AudioRequest.SerializeToString,
            palette__ai__pb2.TextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TextToEmotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palette_ai.PaletteAI/TextToEmotion',
            palette__ai__pb2.TextRequest.SerializeToString,
            palette__ai__pb2.EmotionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
